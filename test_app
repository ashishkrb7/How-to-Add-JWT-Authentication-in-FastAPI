import pytest
from fastapi.testclient import TestClient
from app import app

@pytest.fixture
def test_client():
    return TestClient(app)

def test_create_user():
    # Test successful user creation
    response = app.post("/signup", json={"email": "test@example.com", "password": "testpassword"})
    assert response.status_code == 200
    assert response.json()["email"] == "test@example.com"
    assert "id" in response.json()

def test_create_user_duplicate_email():
    # Test duplicate email during user creation
    app.post("/signup", json={"email": "test@example.com", "password": "testpassword"})
    response = app.post("/signup", json={"email": "test@example.com", "password": "testpassword"})
    assert response.status_code == 400
    assert "User with this email already exists" in response.text

def test_login():
    # Test successful user login
    app.post("/signup", json={"email": "test@example.com", "password": "testpassword"})
    response = app.post("/login", data={"username": "test@example.com", "password": "testpassword"})
    assert response.status_code == 200
    assert "access_token" in response.json()
    assert "refresh_token" in response.json()

def test_login_invalid_credentials():
    # Test invalid login credentials
    response = app.post("/login", data={"username": "nonexistent@example.com", "password": "invalidpassword"})
    assert response.status_code == 400
    assert "Incorrect email or password" in response.text

def test_get_me():
    # Test successful retrieval of user details
    app.post("/signup", json={"email": "test@example.com", "password": "testpassword"})
    response_login = app.post("/login", data={"username": "test@example.com", "password": "testpassword"})
    access_token = response_login.json()["access_token"]

    response_me = app.get("/me", headers={"Authorization": f"Bearer {access_token}"})
    assert response_me.status_code == 200
    assert response_me.json()["email"] == "test@example.com"
    assert "id" in response_me.json()

def test_get_me_unauthorized():
    # Test unauthorized access to /me endpoint
    response = app.get("/me")
    assert response.status_code == 401
    assert "Not authenticated" in response.text

def test_reset_email():
    # Test successful email reset
    app.post("/signup", json={"email": "test@example.com", "password": "testpassword"})
    response_login = app.post("/login", data={"username": "test@example.com", "password": "testpassword"})
    access_token = response_login.json()["access_token"]

    response_reset = app.post(
        "/reset_email",
        headers={"Authorization": f"Bearer {access_token}"},
        data={"email": "test@example.com", "new_email": "newtest@example.com", "password": "testpassword", "new_password": "newtestpassword"}
    )
    assert response_reset.status_code == 200
    assert response_reset.json()["email"] == "newtest@example.com"
    assert "id" in response_reset.json()

def test_reset_email_invalid_credentials():
    # Test invalid credentials during email reset
    response = app.post(
        "/reset_email",
        data={"email": "nonexistent@example.com", "new_email": "newtest@example.com", "password": "invalidpassword", "new_password": "newtestpassword"}
    )
    assert response.status_code == 400
    assert "Incorrect email or password" in response.text
